name: Fedlin Azure Secure CI/CD (Self-Contained)

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/deploy-azure.yml"
  workflow_dispatch:
     inputs:
      ssh_cidr:
             description: "CIDR(s) allowed for SSH this run (e.g., 203.0.113.4/32 or '203.0.113.4/32 198.51.100.7/32')"
             required: false
             default: ""

permissions:
  id-token: write    # OIDC to Azure
  contents: read

concurrency:
  group: fedlin-azure-secure-cicd
  cancel-in-progress: false

env:
  # ---- Portfolio-friendly defaults (override as needed) ----
  REGION: eastus
  RESOURCE_PREFIX: fedlin
  VM_SIZE: Standard_B1s          # free/low-cost tier friendly
  SSH_USERNAME: "fedlin"
  MY_IP: "*"                     # tighten to your /32 later (e.g., "X.Y.Z.W/32")
  ENABLE_HTTP: "false"           # "true" opens 80/443 in NSG
  IMAGE_URN: almalinux:almalinux:9-gen2:latest
  VNET_CIDR: 10.10.0.0/16
  SUBNET_CIDR: 10.10.1.0/24

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: 0cce1b1b-4a7b-490b-98d0-c37f10229830
          tenant-id: 37a995a8-b679-461e-950d-fb968d379ce5
          subscription-id: d3c8b5d7-59b2-4e2c-92f6-0b87d5eb5bdb

      - name: Preflight checks
        env:
          SSH_PUBLIC_KEY: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHSAmyIPFw2Ms25cOb2xhCw7liSrmVn9vUAUUCTPIfEZ github-anthracite-iv"
        run: |
          set -euo pipefail
          echo "==> Preflight: SSH public key"

          # Must exist (workflows from forks won't have secrets)
          if [[ -z "${SSH_PUBLIC_KEY:-}" ]]; then
            echo "ERROR: SSH_PUBLIC_KEY secret is missing or empty.
          Set it in: Settings → Secrets and variables → Actions → New repository secret (SSH_PUBLIC_KEY).
          Value must be the *public* key line from ~/.ssh/<name>.pub (e.g., 'ssh-ed25519 AAAA... comment')." >&2
            exit 1
          fi

          # Normalize and basic validation
          SSH_PUBLIC_KEY="$(echo -n "$SSH_PUBLIC_KEY" | tr -d '\r')"
          if grep -q "PRIVATE KEY" <<<"$SSH_PUBLIC_KEY"; then
            echo "ERROR: You pasted a PRIVATE key. Use the .pub public key instead." >&2
            exit 1
          fi
          if ! [[ "$SSH_PUBLIC_KEY" =~ ^(ssh-ed25519|ssh-rsa|ecdsa-sha2-nistp(256|384|521))\  ]]; then
            echo "ERROR: SSH_PUBLIC_KEY doesn't look like an OpenSSH public key line." >&2
            exit 1
          fi

          # Mask in logs and confirm type
          echo "::add-mask::$SSH_PUBLIC_KEY"
          echo "OK: Public key detected (type: ${SSH_PUBLIC_KEY%% *})"

      - name: Deploy Azure resources (VNET, NSG, VM, LAW, DCR, AMA)
        env:
          REGION: ${{ env.REGION }}
          RESOURCE_PREFIX: ${{ env.RESOURCE_PREFIX }}
          VM_SIZE: ${{ env.VM_SIZE }}
          SSH_USERNAME: "fedlin"
          SSH_PUBLIC_KEY: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHSAmyIPFw2Ms25cOb2xhCw7liSrmVn9vUAUUCTPIfEZ github-anthracite-iv"
          MY_IP: ${{ inputs.ssh_cidr || secrets.MY_IP || vars.MY_IP || '' }}
          ENABLE_HTTP: ${{ env.ENABLE_HTTP }}
          VNET_CIDR: ${{ env.VNET_CIDR }}
          SUBNET_CIDR: ${{ env.SUBNET_CIDR }}
          OPEN_SSH: ${{ inputs.open_ssh || 'false' }}
        run: |
          set -euo pipefail
          # Ensure an SSH public key is available for VM creation
          mkdir -p outputs
          if [[ -z "${SSH_PUBLIC_KEY:-}" ]]; then
            echo "No SSH_PUBLIC_KEY secret found; generating a temporary keypair..."
            mkdir -p .tmp_ssh
            ssh-keygen -t ed25519 -N "" -f .tmp_ssh/id_ed25519 -C "Fedlin"
            SSH_PUBLIC_KEY="$(cat .tmp_ssh/id_ed25519.pub)"
            tar -czf outputs/temp_ssh_keypair.tgz -C .tmp_ssh id_ed25519 id_ed25519.pub
          fi
          printf '%s\n' "$SSH_PUBLIC_KEY" > .tmp_pubkey
          echo "Using SSH key fingerprint: $(ssh-keygen -lf .tmp_pubkey | awk '{print $2}')"

          RG="${RESOURCE_PREFIX}-rg"
          LAW="${RESOURCE_PREFIX}-law"
          DCR="${RESOURCE_PREFIX}-dcr"
          DCRA="${RESOURCE_PREFIX}-dcra"
          VNET="${RESOURCE_PREFIX}-vnet"
          SUBNET="${RESOURCE_PREFIX}-subnet"
          NSG="${RESOURCE_PREFIX}-nsg"
          PIP="${RESOURCE_PREFIX}-pip"
          NIC="${RESOURCE_PREFIX}-nic"
          VM="${RESOURCE_PREFIX}-vm"
          AMA_NAME="AzureMonitorLinuxAgent"

          echo "==> Ensure Resource Group"
          az group show -n "$RG" >/dev/null 2>&1 || az group create -n "$RG" -l "$REGION" 1>/dev/null

          echo "==> Ensure Log Analytics Workspace"
          if ! LAW_ID="$(az monitor log-analytics workspace show -g "$RG" -n "$LAW" --query id -o tsv 2>/dev/null)"; then
            az monitor log-analytics workspace create -g "$RG" -n "$LAW" -l "$REGION" -o json > outputs/law_create.json
            LAW_ID="$(az monitor log-analytics workspace show -g "$RG" -n "$LAW" --query id -o tsv)"
          else
            az monitor log-analytics workspace show -g "$RG" -n "$LAW" -o json > outputs/law_show.json
          fi
          echo "LAW_ID=$LAW_ID"

          echo "==> Ensure Data Collection Rule (syslog → LAW)"
          DCR_FILE="$(mktemp)"
          cat > "$DCR_FILE" <<EOF
          {
            "location": "${REGION}",
            "properties": {
              "dataSources": {
                "syslog": [
                  {
                    "name": "syslog-source",
                    "streams": [ "Microsoft-Syslog" ],
                    "facilityNames": ["auth","authpriv","daemon","kern","syslog","user","local0"],
                    "logLevels": ["Debug","Info","Notice","Warning","Error","Critical","Alert","Emergency"]
                  }
                ]
              },
              "destinations": {
                "logAnalytics": [
                  {
                    "name": "law-dest",
                    "workspaceResourceId": "${LAW_ID}"
                  }
                ]
              },
              "dataFlows": [
                { "streams": ["Microsoft-Syslog"], "destinations": ["law-dest"] }
              ]
            }
          }
          EOF

          if ! az monitor data-collection rule show -g "$RG" -n "$DCR" 1>/dev/null 2>&1; then
            az monitor data-collection rule create -g "$RG" -n "$DCR" --rule-file "$DCR_FILE" -o json > outputs/dcr_create.json
          else
            echo "DCR exists; leaving as-is." | tee outputs/dcr_exists.txt
          fi
          DCR_ID="$(az monitor data-collection rule show -g "$RG" -n "$DCR" --query id -o tsv)"

          echo "==> Ensure VNET + Subnet"
          if ! az network vnet show -g "$RG" -n "$VNET" 1>/dev/null 2>&1; then
            az network vnet create -g "$RG" -n "$VNET" --address-prefix "$VNET_CIDR" \
              --subnet-name "$SUBNET" --subnet-prefix "$SUBNET_CIDR" -o json > outputs/vnet_create.json
          fi

          echo "==> Ensure NSG with CIS-style rules"

          # Resolve the actual NSG attached to the VM (avoid drift)
          NIC_ID="$(az vm show -g "$RG" -n "$VM" --query 'networkProfile.networkInterfaces[0].id' -o tsv)"
          ATTACHED_NSG_ID="$(az network nic show --ids "$NIC_ID" --query 'networkSecurityGroup.id' -o tsv || true)"
          if [[ -n "${ATTACHED_NSG_ID:-}" ]]; then
            NSG="${ATTACHED_NSG_ID##*/}"
          else
            # Fallback: ensure NSG by expected name and attach it to NIC if missing
            az network nsg show -g "$RG" -n "$NSG" 1>/dev/null 2>&1 || \
              az network nsg create -g "$RG" -n "$NSG" -o json > outputs/nsg_create.json
            az network nic update --ids "$NIC_ID" --network-security-group "$NSG" 1>/dev/null
          fi

          # --- STRICT /32 ENFORCEMENT FOR SSH ---
          SRC_PREFIXES_RAW="${MY_IP:-}"
          if [[ -z "$SRC_PREFIXES_RAW" || "$SRC_PREFIXES_RAW" == "*" ]]; then
            DETECTED_IP="$(curl -fsSL https://api.ipify.org || curl -fsSL https://ifconfig.me || true)"
            if [[ -z "${DETECTED_IP:-}" ]]; then
              echo "ERROR: No ssh_cidr provided and public IP detection failed; refusing to open SSH." >&2
              exit 1
            fi
            SRC_PREFIXES_RAW="${DETECTED_IP}/32"
          fi
          read -r -a SRC_ARR <<< "$SRC_PREFIXES_RAW"
          for cidr in "${SRC_ARR[@]}"; do
            if [[ ! "$cidr" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/32$ ]]; then
              echo "ERROR: ssh_cidr must be one or more IPv4 /32 CIDRs (space-separated). Offending: '$cidr'." >&2
              exit 1
            fi


          # Ensure/Update Allow-SSH (priority 1000) on port 22 to the /32 list
          if az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-SSH 1>/dev/null 2>&1; then
            az network nsg rule update -g "$RG" --nsg-name "$NSG" -n Allow-SSH \
              --priority 1000 --direction Inbound --access Allow --protocol Tcp \
              --destination-port-ranges 22 --source-address-prefixes "${SRC_ARR[@]}" 1>/dev/null
          else
            az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-SSH \
              --priority 1000 --direction Inbound --access Allow --protocol Tcp \
              --destination-port-ranges 22 --source-address-prefixes "${SRC_ARR[@]}" 1>/dev/null
          fi

          # Optional web (leave as-is if you use it)
          if [[ "${ENABLE_HTTP:-false}" == "true" ]]; then
            az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-HTTP 1>/dev/null 2>&1 || \
              az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-HTTP \
                --priority 1010 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 80 --source-address-prefixes Internet 1>/dev/null
            az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-HTTPS 1>/dev/null 2>&1 || \
              az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-HTTPS \
                --priority 1020 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 443 --source-address-prefixes Internet 1>/dev/null
          fi
            # Ensure/Update Allow-SSH (priority 1000) on port 22
            if az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-SSH 1>/dev/null 2>&1; then
              az network nsg rule update -g "$RG" --nsg-name "$NSG" -n Allow-SSH \
                --priority 1000 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 22 --source-address-prefixes "${SRC_ARR[@]}" 1>/dev/null
            else
              az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-SSH \
                --priority 1000 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 22 --source-address-prefixes "${SRC_ARR[@]}" 1>/dev/null
            fi
          else
            # CLOSE SSH entirely if not requested
            az network nsg rule delete -g "$RG" --nsg-name "$NSG" -n Allow-SSH 1>/dev/null 2>&1 || true
          fi

          # Optional web openings (HTTP/HTTPS) when ENABLE_HTTP=true (unchanged)
          if [[ "${ENABLE_HTTP:-false}" == "true" ]]; then
            az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-HTTP 1>/dev/null 2>&1 || \
              az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-HTTP \
                --priority 1010 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 80 --source-address-prefixes Internet 1>/dev/null

            az network nsg rule show -g "$RG" --nsg-name "$NSG" -n Allow-HTTPS 1>/dev/null 2>&1 || \
              az network nsg rule create -g "$RG" --nsg-name "$NSG" -n Allow-HTTPS \
                --priority 1020 --direction Inbound --access Allow --protocol Tcp \
                --destination-port-ranges 443 --source-address-prefixes Internet 1>/dev/null
          fi


          # Fallback Alma 9 Gen2 image if resolver finds nothing (no ':latest')
          : "${IMAGE_URN:=almalinux:almalinux-x86_64:9-gen2:9.6.202505220}"

          # Resolve exact AlmaLinux 9 Gen2 image for this region
          echo "Resolving AlmaLinux 9 Gen2 in ${REGION}..."
          ALMA_URN="$(az vm image list \
            --location "${REGION}" \
            --publisher almalinux \
            --offer almalinux \
            --sku 9-gen2 \
            --all \
            --query "sort_by(@, &version)[-1].urn" -o tsv || true)"
          if [[ -n "${ALMA_URN:-}" ]]; then
            IMAGE_URN="${ALMA_URN}"
          fi
          echo "Using IMAGE_URN=${IMAGE_URN}"

          # Prepare cloud-init early (set -u safe)
          CLOUD_INIT="$(mktemp)"
          echo "CLOUD_INIT at: $CLOUD_INIT"
          echo "==> Cloud-init hardening (EL9)"
          cat > "$CLOUD_INIT" <<EOF
          #cloud-config
          ssh_pwauth: false
          users:
            - name: "fedlin"
              sudo: ALL=(ALL) NOPASSWD:ALL
              groups: [ wheel ]
              shell: /bin/bash
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHSAmyIPFw2Ms25cOb2xhCw7liSrmVn9vUAUUCTPIfEZ Fedlin

          package_update: true
          packages:
            - audit
            - policycoreutils-python-utils

          runcmd:
            - systemctl enable --now auditd
            - sed -i 's/^#\?ClientAliveInterval.*/ClientAliveInterval 300/' /etc/ssh/sshd_config
            - sed -i 's/^#\?ClientAliveCountMax.*/ClientAliveCountMax 2/' /etc/ssh/sshd_config
            - sed -i 's/^#\?LogLevel.*/LogLevel VERBOSE/' /etc/ssh/sshd_config
            - restorecon -Rv /home/fedlin || true
            - systemctl restart sshd
          EOF

          echo "==> Ensure VM (AlmaLinux 9)"
          if ! az vm show -g "$RG" -n "$VM" >/dev/null 2>&1; then
            az vm create \
              -g "$RG" -n "$VM" \
              --image "${IMAGE_URN}" \
              --size "$VM_SIZE" \
              --admin-username "$SSH_USERNAME" \
              --authentication-type ssh \
              --ssh-key-values "$SSH_PUBLIC_KEY" \
              --nics "$NIC" \
              --custom-data "$CLOUD_INIT" \
              --os-disk-name "${RESOURCE_PREFIX}-osdisk" \
              --public-ip-address "$PIP" \
              -o json > outputs/vm_create.json
              
          else
            az vm show -g "$RG" -n "$VM" -o json > outputs/vm_show.json
          fi

          PUBLIC_IP="$(az network public-ip show -g "$RG" -n "$PIP" --query ipAddress -o tsv)"
          printf '{"publicIp":"%s"}\n' "$PUBLIC_IP" > outputs/public_ip.json

          echo "==> Ensure Azure Monitor Agent (AMA) + DCR Association"
          if ! az vm extension show -g "$RG" --vm-name "$VM" --name "$AMA_NAME" \
               --query provisioningState -o tsv 2>/dev/null; then
            az vm extension set \
              -g "$RG" \
              --vm-name "$VM" \
              --publisher Microsoft.Azure.Monitor \
              --name "$AMA_NAME" \
              -o json > outputs/ama_install.json
          fi

          VM_ID="$(az vm show -g "$RG" -n "$VM" --query id -o tsv)"
          if ! az monitor data-collection rule association show \
                 --association-name "$DCRA" \
                 --resource "$VM_ID" >/dev/null 2>&1; then
            az monitor data-collection rule association create \
              --association-name "$DCRA" \
              --resource "$VM_ID" \
              --rule-id "$DCR_ID" \
              -o json > outputs/dcra_create.json
          fi

          echo "==> Capture evidence"
          az resource list -g "$RG" -o table | tee outputs/resources_table.txt
          az network nsg rule list -g "$RG" --nsg-name "$NSG" -o table | tee outputs/nsg_rules.txt

          cat > outputs/ssh_instructions.txt <<TXT
          SSH:
            ssh ${SSH_USERNAME}@${PUBLIC_IP}

          Notes:
            - Restrict SSH to your /32 by setting env.MY_IP (e.g., "1.2.3.4/32").
            - Set ENABLE_HTTP=true to allow TCP 80/443.
            - AMA installed; syslog flows to LAW via DCR "${DCR}".
          TXT

      - name: Collect & sanitize evidence (portfolio pack)
        if: ${{ success() }}
        run: |
          set -euo pipefail
          # re-derive names for this step (set -u safe)
          : "${RESOURCE_PREFIX:?RESOURCE_PREFIX must be set}"
          RG="${RESOURCE_PREFIX}-rg"
          LAW="${RESOURCE_PREFIX}-law"
          DCR="${RESOURCE_PREFIX}-dcr"
          NSG="${RESOURCE_PREFIX}-nsg"
          VM="${RESOURCE_PREFIX}-vm"

          mkdir -p evidence/raw evidence/safe

          echo "==> Gather raw evidence"
          az resource list -g "$RG" -o json > evidence/raw/resources.json
          az network nsg rule list -g "$RG" --nsg-name "$NSG" -o json > evidence/raw/nsg_rules.json
          az vm show -g "$RG" -n "$VM" -o json > evidence/raw/vm.json
          az monitor log-analytics workspace show -g "$RG" -n "$LAW" -o json > evidence/raw/law.json || true
          az monitor data-collection rule show -g "$RG" -n "$DCR" -o json > evidence/raw/dcr.json || true
          az monitor data-collection rule association list \
            --resource "$(az vm show -g "$RG" -n "$VM" --query id -o tsv)" -o json \
            > evidence/raw/dcra.json || true

          echo "==> Create human readable tables"
          az resource list -g "$RG" -o table > evidence/raw/resources_table.txt
          az network nsg rule list -g "$RG" --nsg-name "$NSG" -o table > evidence/raw/nsg_rules_table.txt

          echo "==> Redact sensitive values"
          redact() {
            sed -E \
              -e 's@/subscriptions/[^/"]+@/subscriptions/SUBSCRIPTION_REDACTED@g' \
              -e 's/[0-9]{1,3}(\.[0-9]{1,3}){3}/IP_REDACTED/g' \
              -e 's/"tenant(Id)?": *"[^"]+"/"tenant":"REDACTED"/g' \
              -e 's/"clientId": *"[^"]+"/"clientId":"REDACTED"/g'
          }
          for f in evidence/raw/*; do
            bn="$(basename "$f")"
            redact < "$f" > "evidence/safe/$bn" || cp "$f" "evidence/safe/$bn"
          done

          echo "==> Add short summary"
          {
            echo "# Evidence Summary"
            echo
            echo "## VM"
            jq -r '
              {name,location} + {size:.hardwareProfile.vmSize} +
              {image: ((.storageProfile.imageReference.publisher // "") + ":" +
                       (.storageProfile.imageReference.offer // "") + ":" +
                       (.storageProfile.imageReference.sku // ""))}
            ' evidence/safe/vm.json 2>/dev/null || true
            echo
            echo "## NSG rules (first 20)"
            head -n 20 evidence/raw/nsg_rules_table.txt 2>/dev/null || true
          } > evidence/safe/README-summary.md


      - name: Upload Evidence Pack (sanitized)
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: fedlin-evidence-pack
          path: evidence/safe
          if-no-files-found: warn
          retention-days: 7


  mirror_to_gitlab:
    name: Mirror to GitLab (non-blocking)
    needs: deploy
    if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git identity
        run: |
          git config user.name "fedlin-ci"
          git config user.email "ci@fedlin.com"

      - name: Add GitLab remote (validate)
        env:
          GITLAB_HOST: gitlab.com
          GITLAB_PROJECT: fedlinllc/fedlin-azure-secure-cicd   # e.g. fedlinllc/fedlin-azure-secure-cicd
          GITLAB_TOKEN: glpat-oF-cbNmJ_a4LxfKmxqRBK286MQp1OmkxMmhsCw.01.121srlvbq       # PAT with api + write_repository
        run: |
          set -euo pipefail
          OPEN_SSH="${OPEN_SSH:-false}"
          MY_IP="${MY_IP:-}"
          ENABLE_HTTP="${ENABLE_HTTP:-false}"

          : "${GITLAB_HOST:?Set secret GITLAB_HOST (e.g., gitlab.com)}"
          : "${GITLAB_PROJECT:?Set secret GITLAB_PROJECT (e.g., namespace/repo)}"
          : "${GITLAB_TOKEN:?Set secret GITLAB_TOKEN (PAT with api,write_repository)}"

          # sanity checks
          if [[ "$GITLAB_HOST" != *.* ]]; then
            echo "GITLAB_HOST must be a domain (e.g., gitlab.com)"; exit 1; fi
          if [[ "$GITLAB_PROJECT" != */* ]]; then
            echo "GITLAB_PROJECT must be 'namespace/repo' (contains a slash)"; exit 1; fi

          git remote remove gitlab 2>/dev/null || true
          git remote add gitlab "https://oauth2:${GITLAB_TOKEN}@${GITLAB_HOST}/${GITLAB_PROJECT}.git"

          # connectivity check (clear error if PAT/path wrong)
          git ls-remote --heads gitlab >/dev/null
          echo "✅ Remote reachable."


      - name: Push main + tags to GitLab
        run: |
          set -euo pipefail
          # fetch remote main if present (ignore if missing)
          git fetch gitlab refs/heads/main:refs/remotes/gitlab/main || true

          # Push main: try fast-forward first; if diverged, use force-with-lease safely
          if git push gitlab HEAD:refs/heads/main; then
            echo "Pushed main (fast-forward)."
          else
            echo "Diverged history. Trying --force-with-lease on main…"
            git push gitlab HEAD:refs/heads/main --force-with-lease=refs/heads/main
          fi

          # Push tags with lease
          git push gitlab --tags --force-with-lease

      - name: Done
        run: echo "✅ Mirrored to GitLab."
